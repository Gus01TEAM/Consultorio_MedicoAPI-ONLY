@page "/create-user"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.userDTO;
@using Consultorio_Medico.BL.DTOs.RolDTO;
@using Consultorio_Medico.BL.DTOs.UserSchedule;
@using Consultorio_Medico.Blazor.Data;

<h3>@language.Traduction("Crear Nuevo Usuario", "Create New User")</h3>
@if (isSuccess == false && isError == false)
{
    <EditForm Model="userAdd" OnValidSubmit="@Create">

        <div class="row">
        <RadzenRow Style="margin-top: 10px; width: 100%">
                <RadzenDropDown @bind-Value="userAdd.RolId" Data=@rols TextProperty="Name" ValueProperty="RolId" Placeholder="@(language.Traduction("-Seleccione un Rol-","-Select rol-"))" Style="width: 50%; max-width: 400px;" />

            <RadzenDropDown @bind-Value="userAdd.Status" Data="GetStatusOptions()" Placeholder="@(language.Traduction("-Seleccione Status-","-Slect Status-"))" TextProperty="Text" ValueProperty="Value" Style="width: 50%" />
        </RadzenRow>
        </div>

        <div class="row">
            <RadzenFormField Text="@(language.Traduction("Nombre","Name"))" Style="width: 50%; margin-bottom: 10px" Variant="@variant">
            <RadzenTextBox @bind-Value="userAdd.Name" />
        </RadzenFormField>

         <RadzenFormField Text="@(language.Traduction("Apellido","Last Name"))" Style="width: 50%; margin-bottom: 10px" Variant="@variant">
            <RadzenTextBox @bind-Value="userAdd.LastName" />
        </RadzenFormField>
        </div>

        <div class="row">
        <RadzenFormField Text="@(language.Traduction("Telefono","Phone Number"))" Style="width: 50%" Variant="@variant">
            <RadzenTextBox @bind-Value="userAdd.PhoneNumber" />
        </RadzenFormField>

        <RadzenFormField Text="DUI" Style="width: 50%" Variant="@variant">
            <RadzenTextBox @bind-Value="userAdd.Dui" />
        </RadzenFormField>
        </div>

        <div class="row">
        <RadzenFormField Text="Email" Style="width: 50%" Variant="@variant">
            <RadzenTextBox @bind-Value="userAdd.Email" />
        </RadzenFormField>

        <RadzenFormField Text="@(language.Traduction("Nombre de Usuario","User Name"))" Style="width: 50%" Variant="@variant">
            <RadzenTextBox Placeholder="User Name" @bind-Value="userAdd.Login" />
        </RadzenFormField>
        </div>

        <div class="row">
        <RadzenFormField Style="width: 50%" Variant="@variant">
            <RadzenDatePicker Placeholder="@(language.Traduction("Fecha de Registro","Registration Date"))" @bind-Value="userAdd.FechaRegistro" />
        </RadzenFormField>

        <RadzenFormField Text="Password" Style="width: 50%" Variant="@variant">
            <RadzenPassword Placeholder="Password" @bind-Value="userAdd.Password" />
        </RadzenFormField>
        </div>

        <RadzenFormField Text="@(language.Traduction("Confirmar Contraseña","Confirm Password"))" Style="width: 50%" Variant="@variant">
            <RadzenPassword Placeholder="Confirm Password" @bind-Value="userAdd.ConfirmarPassword_aux" />
        </RadzenFormField>


        <RadzenRow Style="magin-top: 10px; width: 100%">

        </RadzenRow>

        <div class="row">
            <div class="col-12">
                <RadzenButton ButtonType="ButtonType.Submit" Text="@(language.Traduction("Guardar Usuario","Save User"))" Icon="check_circle" Style="margin-top: 10px"></RadzenButton>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <RadzenButton Text="@(language.Traduction("Cancelar","Cancel"))" ButtonStyle="ButtonStyle.Danger" Icon="cancel" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
            </div>
        </div>
    </EditForm>
}
else if (isSuccess)
{
    userAdd = new UserAddDTO();

    isError = false;
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Success" Size="AlertSize.Medium" Shade="Shade.Light" AllowClose=false>
        @(language.Traduction("¡El usuario se creó con éxito!", "User created successfully!"))
        User created successfully!
    </RadzenAlert>
    <RadzenButton Text="@(language.Traduction("Ir a Crear","Go to Create"))" Icon="check_circle" Style="margin-top: 10px" Click="@GoCreate"></RadzenButton>
    <RadzenButton Text="@(language.Traduction("Regresar a la Lista","Return to List"))" ButtonStyle="ButtonStyle.Secondary" Icon="cancel" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}
else if (isError)
{
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Danger" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
        @(language.Traduction("Ocurrió un error al crear el usuario.", "An error occurred while trying to add new user."))
    </RadzenAlert>
    <RadzenButton Text="@(language.Traduction("Aceptar", "Accept"))" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}

@code {

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    UserService userService { get; set; }

    [Inject]
    RolService rolService { get; set; }

    [Inject]
    UserScheduleService userSchedule { get; set; }

    [Inject]
    LanguageService language { get; set; }

    List<UserScheduleSearchOutputDTO> userSchedules = new List<UserScheduleSearchOutputDTO>();
    List<RolSearchingOutputDTO> rols = new List<RolSearchingOutputDTO>();

    UserAddDTO userAdd = new UserAddDTO();

    Variant variant = Variant.Outlined;

    bool isSuccess = false;
    bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await rolService.Search();
        if (response.Success)
        {
            rols = response.Data;
        }

        var sched = await userSchedule.Search();
        if (sched.Success)
        {
            userSchedules = sched.Data;
        }
    }

    private async Task Create()
    {
        var result = await userService.Create(userAdd);
        if (result != null)
            isSuccess = true;
        else
            isError = true;
    }

    private void GoCreate()
    {
        isSuccess = false;
        isError = false;
    }

    IEnumerable<dynamic> GetStatusOptions()
    {
        yield return new { Text = "ACTIVO", Value = (byte)1 };
        yield return new { Text = "INACTIVO", Value = (byte)2 };
    }

    private void Cancel()
    {
        navigation.NavigateTo("/userList");
    }

}
