@page "/appointList"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.AppointmentDTO;
@using Consultorio_Medico.Blazor.Data;

<h3>@language.Traduction("Lista de Citas", "Appointment List")</h3>
@if (isOcultarGrid)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                AllowGrouping="true" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@appointments" TItem="AppointmentSearchOutputDTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                IsLoading=@isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading">
        <Columns>

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="UserName" Title="@(language.Traduction("Nombre", "Name"))" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="PatientName" Title="@(language.Traduction("Nombre del Paciente", "Patient Name"))" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="Reason" Title="@(language.Traduction("Razon", "Reason"))" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="Appointment_date" Title="@(language.Traduction("Fecha de la Cita", "Appointment Date"))" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="Appointment_Hour" Title="@(language.Traduction("Hora de Cita", "Hour of Appointment"))" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="StrStatus" Title="@(language.Traduction("Estado", "Status"))" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Property="StrStatus2" Title="@(language.Traduction("Turno", "Shift"))" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="AppointmentSearchOutputDTO" Context="appoint" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="160px">
                <Template Context="appoint">
                    <RadzenButton Icon="delete" IconColor="@Colors.Danger" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoDelete(appoint))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="details" IconColor="@Colors.PrimaryLight" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoDetails(appoint))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="edit" IconColor="@Colors.PrimaryLight" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoEdit(appoint))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="open_in_new" IconColor="@Colors.PrimaryLight" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoWhassap(appoint))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<br>
<RadzenButton Click=GoCreate Text="@(language.Traduction("Agregar", "Add New"))" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />

@code {

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    AppointmentService appointmentService { get; set; }

    [Inject]
    LanguageService language { get; set; }

    List<AppointmentSearchOutputDTO> appointments = new List<AppointmentSearchOutputDTO>();

    bool isLoading = false;
    bool isOcultarGrid = true;
    async Task ShowLoading()
    {
        isLoading = true;

        await Task.Yield();

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await appointmentService.Search();
        if (response.Success)
        {
            appointments = response.Data;
        }
    }

    private void GoCreate()
    {
        navigation.NavigateTo($"/create-appointment");
    }

    private void GoEdit(AppointmentSearchOutputDTO appointment)
    {
        navigation.NavigateTo($"/edit-appoint/{appointment.AppointmentId}");
    }

    private void GoDetails(AppointmentSearchOutputDTO appointment)
    {
        navigation.NavigateTo($"/appoint-details/{appointment.AppointmentId}");
    }

    private void GoDelete(AppointmentSearchOutputDTO appointment)
    {
        navigation.NavigateTo($"/delete-appoint/{appointment.AppointmentId}");
    }
    private void GoWhassap(AppointmentSearchOutputDTO appointment)
    {
        string phone="50376156062";
        string mensaje = "Su cita fue creada con exito";
        int idCita = 100;
        string urlCita = navigation.BaseUri + $"/appoint-details/{idCita}";
        mensaje += " puede consulta su cita:"+urlCita;
        navigation.NavigateTo($"https://wa.me/{phone}?text={mensaje}", forceLoad: true);
    }
}
