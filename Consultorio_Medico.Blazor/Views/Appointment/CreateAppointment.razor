@page "/create-appointment"

@using Consultorio_Medico.BL.DTOs.PatientDTO
@using Consultorio_Medico.BL.DTOs.UserSchedule
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.AppointmentDTO;
@using Consultorio_Medico.Blazor.Data;

<h3>@language.Traduction("Crear Nuevo Usuario", "Create New User")</h3>
@if (isSuccess == false && isError == false)
{
    <EditForm Model="appointment" OnValidSubmit="@Create">

        <div class="row">
        <RadzenRow Style="margin-top: 10px; width: 100%">
                <RadzenDropDown @bind-Value="appointment.UserSchedulesId" Data=@userSchedules TextProperty="UserName" ValueProperty="UserSchedulesId" Placeholder="@(language.Traduction("-Seleccione un Usuario-","-Select Doctor-"))" Style="width: 50%; max-width: 400px;" />

                <RadzenDropDown @bind-Value="appointment.Status" Data="GetStatusOptions()" Placeholder="@(language.Traduction("-Estado de la cita-","-Appointment Status-"))" TextProperty="Text" ValueProperty="Value" Style="width: 50%" />
        </RadzenRow>
        </div>
        <div class="row">

            <RadzenRow Style="margin-top: 10px; width: 100%">
                
                <RadzenDropDown @bind-Value="appointment.PatientId" Data=@patients TextProperty="Name" ValueProperty="PatientId" Placeholder="@(language.Traduction("-Seleccione un Paciente-","-Select Patient-"))" Style="width: 50%; max-width: 400px;" />
            </RadzenRow>

            <RadzenFormField Text="@(language.Traduction("Rason de cita","Appointment Reason"))" Style="width: 50%; margin-bottom: 10px" Variant="@variant">
                <RadzenTextBox @bind-Value="appointment.Reason" />
            </RadzenFormField>
        </div>

        <div class="row">
            <RadzenFormField Style="width: 50%" Variant="@variant">
                <RadzenDatePicker Placeholder="@(language.Traduction("Fecha de Cita","Appointment Date"))" @bind-Value="appointment.Appointment_date" />
            </RadzenFormField>
             
        </div>
         
        </EditForm>
        }


@code {

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    AppointmentService appointmentService { get; set; }

    [Inject]
    LanguageService language { get; set; }

    [Inject]
    UserScheduleService userSchedule { get; set; }

    [Inject]
    PatientService patientService { get; set; }

    List<AppointmentSearchOutputDTO> appoinments = new List<AppointmentSearchOutputDTO>();
    List<UserScheduleSearchOutputDTO> userSchedules = new List<UserScheduleSearchOutputDTO>();
    List<patientSearchOutputDTO> patients = new List<patientSearchOutputDTO>();

    AppointmentInputDTO appointment = new AppointmentInputDTO();


    Variant variant = Variant.Outlined;

    bool isSuccess = false;
    bool isError = false;

    IEnumerable<dynamic> GetStatusOptions()
    {
        yield return new { Text = "Done", Value = (byte)1 };
        yield return new { Text = "Inactive", Value = (byte)2 };
        yield return new { Text = "Pending", Value = (byte)3 };
        yield return new { Text = "Canceled", Value = (byte)4 };

    }
    private async Task Create()
    {
        var result = await appointmentService.Create(appointment);
        if (result != null)
            isSuccess = true;
        else
            isError = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await patientService.Search();
        if (response.Success)
        {
            patients = response.Data;
        }

        var sched = await userSchedule.Search();
        if (sched.Success)
        {
            userSchedules = sched.Data;
        }
    }
    private void GoCreate()
    {
        isSuccess = false;
        isError = false;
    }

    IEnumerable<dynamic> Shift(){
        yield return new { Text = "AM", Value = (byte)1 };
        yield return new { Text = "PM", Value = (byte)2 };
    }
    private void Cancel()
    {
        navigation.NavigateTo("/appointList");
    }
}
