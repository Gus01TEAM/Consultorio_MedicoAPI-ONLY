@page "/edit-specialty/{Id:int}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.SpecialtiesDTO;
@using Consultorio_Medico.Blazor.Data;

<h3>EditSpecialty</h3>
@if (isSuccess == false && isError == false)
{
    <EditForm Model="specialtyIn" OnValidSubmit="@Edit">
        <div class="row">
            <RadzenFormField Text="Name" Style="width: 50%" Variant="@variant">
                <RadzenTextBox @bind-Value="specialtyIn.Specialty" />
                <ValidationMessage For="() => specialtyIn.Specialty" />
            </RadzenFormField>
        </div>
        <div class="row">
            <div class="col-12">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Uodate Patient" Icon="check_circle" Style="margin-top: 10px"></RadzenButton>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger" Icon="cancel" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
            </div>
        </div>
    </EditForm>
}
else if (isSuccess)
{
    specialtyIn = new SpecialtiesInputDTO();
    isError = false;

    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Success" Size="AlertSize.Medium" Shade="Shade.Light" AllowClose=false>
        The specialty was successfully updating!
    </RadzenAlert>
    <RadzenButton Text="Return to List" ButtonStyle="ButtonStyle.Primary" Icon="check_circle" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}
else if (isError)
{
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Danger" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
        An error occurred while trying to updating specialty.
    </RadzenAlert>
    <RadzenButton Text="Accept" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    SpecialtyService specialtyService { get; set; }

    SpecialtiesInputDTO specialtyIn = new SpecialtiesInputDTO();
    SpecialtiesOutputDTO specialtyOu = new SpecialtiesOutputDTO();

    Variant variant = Variant.Outlined;

    bool isSuccess = false;
    bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var rolResult = await specialtyService.GetById(Id);
        specialtyOu = rolResult.Data;
        specialtyIn = new SpecialtiesInputDTO(specialtyOu);
    }

    private async Task Edit()
    {
        var result = await specialtyService.Edit(Id, specialtyIn);
        if (result != null)
            isSuccess = true;
        else
            isError = true;
    }

    private void Cancel()
    {
        navigation.NavigateTo("/patients");
    }
}
