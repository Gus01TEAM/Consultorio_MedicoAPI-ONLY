@page "/"


@using Consultorio_Medico.Blazor.Data;
@using Consultorio_Medico.BL.DTOs.userDTO;
@inject HttpClient Http;
@using Microsoft.AspNetCore.Identity;
@using Blazored.LocalStorage 

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-4 col-md-6 col-sm-8 mt-5">
            <div class="card rounded-3 border-0 shadow" style="border-radius: 20px;">
                <div class="card-header bg-white text-center" style="border-radius: 20px 20px 0 0;">
                    <div>
                        <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100" src="https://www.uotavalo.edu.ec/wp-content/uploads/2020/03/consultorio-medico.jpg" alt="First slide" style="border-radius: 15px 15px 15px 15px;">
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="https://www.cliniccontrol.cloud/wp-content/uploads/2021/08/consultorio-medico.jpg" alt="Second slide" style="border-radius: 15px 15px 15px 15px;">
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="https://st3.depositphotos.com/24447944/36859/i/600/depositphotos_368593218-stock-photo-doctor-with-stethoscope-in-white.jpg" alt="Third slide" style="border-radius: 15px 15px 15px 15px;">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
                
                <div class="card-body" style="border-radius: 0 0 20px 20px;">
                    
                    <div>

                        <h3 class="display-6"><center><strong>Consultorio Médico</strong></center></h3>
                        
                    </div>
                    <form @onsubmit="@Authenticate">
                        <div class="mb-3">
                            <label for="username" class="form-label">User Name</label>
                            <input type="text" class="form-control" id="username" name="Login" required @bind="login.login">
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="Password" required @bind="login.password">
                        </div>
                        <button type="submit" class="btn btn-primary btn-lg w-100">LOG IN</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    SecurityService securityService { get; set; }

    [Inject]
    NotificationService NotificationService { get; set; }

    [Inject]
    AuthenticationStateProvider authStateProvider { get; set; }

    [Inject]
    IJSRuntime js { get; set; }

    [Inject]
    ILocalStorageService LocalStorage { get; set; }

    bool isSuccess = false;
    bool isError = false;
    bool popup;

    LoginDTO login = new LoginDTO();
    securityDTO security = new securityDTO();

    private async Task Authenticate()
    {

        var userAccount = await securityService.post(login);

        if (userAccount == null || userAccount.token == null )
        {
            InvalidSubmit();

        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            //if (userAccount != null)
            //{


            var user = await securityService.GetUserInfo(userAccount.token);
            //    security = user.Data;
            //}
            user.Data.Token = userAccount.token;
            await customAuthStateProvider.UpdateAuthenticationState(user.Data);
            navigation.NavigateTo("/I", true);
        }   
    }

    string value = "";
    bool password;


    Variant variant = Variant.Outlined;

    void TogglePassword()
    {
        password = !password;
    }
    void InvalidSubmit()
    {
        NotificationService.Notify(NotificationSeverity.Error, "Error", "Not existing user!");
    }
}
