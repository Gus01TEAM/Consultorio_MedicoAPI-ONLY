@page "/roles"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.RolDTO;
@using Consultorio_Medico.Blazor.Data;


<h3>Rol List</h3>
@*@if ( != null && searchResult.Data != null)
{*@
@*<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Status</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var rol in roles)
        {
            <tr>
                <td>@rol.Name</td>

                @if (rol.Status == 1)
                {

                    <td>Active</td>

                }
                else if (rol.Status == 2)
                {

                    <td>Inactive</td>
                }

                <td>
                    <button class="btn btn-dark" @onclick="() => GoEdit(rol.RolId)">Editar</button>
                    <button class="btn btn-info" @onclick="() => GoDetails(rol.RolId)">Ver</button>
                    <button class="btn btn-danger" @onclick="() => GoDelete(rol.RolId)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<NavLink href="/create-rol" class="btn btn-outline-success">Create New Rol</NavLink>
*@


@*<div class="row g-2">
    <div class="col-md">
        <div class="form-floating">
            <input type="text" class="form-control" id="floatingInputGrid" placeholder="" value="">
            <label for="floatingInputGrid">Nombre</label>
        </div>
    </div>
    <div class="col-md">
        <div class="form-floating">
            <select class="form-select" id="floatingSelectGrid">
                @foreach (var rol in roles)
                {
                    <option value="@rol.RolId">@rol.Name</option>
                }
            </select>
            <label for="floatingSelectGrid">Rol de Usuario</label>
        </div>
    </div>
</div>
*@


@*<select class="form-select" aria-label="Default select example">
    <option selected>Seleccione Rol</option>
    @foreach (var rol in roles)
    {
        <option value="@rol.RolId">@rol.Name</option>
    }
</select>*@

@if (isOcultarGrid)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                AllowGrouping="true" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@roles" TItem="RolSearchingOutputDTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                IsLoading=@isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading">
        <Columns>

            <RadzenDataGridColumn TItem="RolSearchingOutputDTO" Property="Name" Title="Name" Frozen="true" Width="160px" />

            <RadzenDataGridColumn TItem="RolSearchingOutputDTO" Property="StrStatus" Title="Status" Width="160px" />

            <RadzenDataGridColumn TItem="RolSearchingOutputDTO" Context="rol" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="rol">
                    <RadzenButton Icon="delete" IconColor="@Colors.Danger" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoDelete(rol))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="details" IconColor="@Colors.PrimaryLight" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoDetails(rol))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="edit" IconColor="@Colors.PrimaryLight" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => GoEdit(rol))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<br>
<RadzenButton Click=GoCreate Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />


@code {
    [Inject]
    NavigationManager navigation { get; set; }
    IQueryable<RolSearchingOutputDTO> data;

    bool isLoading = false;
    bool isOcultarGrid = true;
    async Task ShowLoading()
    {
        isLoading = true;

        await Task.Yield();

        isLoading = false;
    }


    RadzenDataGrid<RolSearchingOutputDTO> grid;



    List<RolSearchingOutputDTO> roles = new List<RolSearchingOutputDTO>();

    [Inject]
    RolService rolService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await rolService.Search();
        if (response.Success)
        {
            roles = response.Data;
        }
    }

    private void GoEdit(RolSearchingOutputDTO rol)
    {
        navigation.NavigateTo($"/edit-rol/{rol.RolId}");
    }
    private void GoCreate()
    {
        navigation.NavigateTo($"/create-rol");
    }

    private void GoDetails(RolSearchingOutputDTO rol)
    {
        navigation.NavigateTo($"/rol-details/{rol.RolId}");
    }

    private void GoDelete(RolSearchingOutputDTO rol)
    {
        navigation.NavigateTo($"/delete-rol/{rol.RolId}");
        /*if(rol==null || rol.RolId==0){
             isOcultarGrid=false;
        }
        else{
           isOcultarGrid=true;
        }

         navigation.NavigateTo("/delete-rol/1");*/
    }

}
