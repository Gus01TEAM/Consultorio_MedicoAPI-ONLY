@page "/delete-rol/{Id:int}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.Blazor.Data;
@using Consultorio_Medico.BL.DTOs.RolDTO;

<h3>¿Eliminar Rol?</h3>

*@if (isSuccess == false && isError == false)
{

    <div class="input-group mb-3">
        <span class="form-group" id="Name"></span>
        <input type="text "class="form-control" disabled @bind="rol.Name" />
    </div>

    <div class aria-label="Status" disabled>
        @if (rol.Status == 1)
        {

            <label for="Activo">Activo</label>

        }
        else if (rol.Status == 2)
        {

            <label for="Inactivo">Inactivo</label>
        }
    </div>

    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="async () => await Delete()">Eliminar</button>
           
            <br>
            <NavLink href="/roles" class="btn btn-secondary">Cancelar</NavLink>
        </div>
    </div>
}


else if (isSuccess)
{
    <p class="alert alert-success">El Rol se elimino con exito.</p>
    <NavLink href="/roles" class="btn btn-primary">Aceptar</NavLink>
}
else if (isError)
{
    <p class="alert alert-error">Sucedio un error al intentar eliminar</p>
    <NavLink herf="/roles" class="btn btn-primary">Aceptar</NavLink>
}






@code {

    [Parameter]
    public int Id { get; set; }

    [Inject]
    RolService rolService { get; set; }

    RolSearchingOutputDTO rol = new RolSearchingOutputDTO();

    bool isSuccess = false;
    bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var rolResult = await rolService.GetById(Id);
        rol = rolResult.Data;
    }

    private async Task Delete()
    {
        var result = await rolService.Delete(rol.RolId);

        if (result != null)
            isSuccess = true;
        else
            isError = true;
    }
}
