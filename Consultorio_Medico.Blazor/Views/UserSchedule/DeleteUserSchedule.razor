@page "/delete-userSched/{Id:int}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Consultorio_Medico.BL.DTOs.UserSchedule;
@using Consultorio_Medico.BL.DTOs.userDTO;
@using Consultorio_Medico.BL.DTOs.SpecialtiesDTO;
@using Consultorio_Medico.BL.DTOs.ScheduleDTO;
@using Consultorio_Medico.Blazor.Data;
@using System.Linq;

<h3>@language.Traduction("¿Eliminar Horario de Usuario?", "Delete User Schedule?")</h3>
@if (isSuccess == false && isError == false)
{
    <div class="row">
        <RadzenFormField Text="@(language.Traduction("Nombre","Name"))" Style="width: 50%; margin-bottom: 10px;" Variant="@variant">
            <RadzenTextBox @bind-Value="user.Name" ReadOnly="true" />
        </RadzenFormField>

        <RadzenFormField Text="@(language.Traduction("Especialidad","Specialty"))" Style="width: 50%; margin-bottom: 10px;" Variant="@variant">
            <RadzenTextBox @bind-Value="specialties.Specialty" ReadOnly="true" />
        </RadzenFormField>
    </div>
    <div class="row">
        <RadzenFormField Text="@(language.Traduction("Dia","Day Name"))" Style="width: 50%; margin-bottom: 10px;" Variant="@variant">
            <RadzenTextBox @bind-Value="sched.DayName" ReadOnly="true" />
        </RadzenFormField>

        <RadzenFormField Text="@(language.Traduction("Inicio del Turno","Start Of Shift"))" Style="width: 50%; margin-bottom: 10px;" Variant="@variant">
            <RadzenNumeric @bind-Value="sched.StartOfShift" ReadOnly="true" />
        </RadzenFormField>

    </div>
    <div class="row">
        <RadzenFormField Text="@(language.Traduction("Fin del Turno","End Of Shift"))" Style="width: 50%;margin-bottom: 10px;" Variant="@variant">
            <RadzenNumeric @bind-Value="sched.EndOfShift" ReadOnly="true" />
        </RadzenFormField>

        <RadzenFormField Text="Number Of Hours" Style="width: 50%; margin-bottom: 10px;" Variant="@variant">
            <RadzenNumeric @bind-Value="sched.NumberOfHours" ReadOnly="true" />
        </RadzenFormField>
    </div>

    <div class="row">
        <RadzenFormField Text="@(language.Traduction("Numero de Horas","Number Of Hours"))" Style="width: 50%; margin-top: 5px;" Variant="@variant">
            <RadzenNumeric @bind-Value="userSchedulesOu.NumberHoursUsed" ReadOnly="true" />
        </RadzenFormField>
    </div>

    <div class="row">
        <div class="col-12">
            <RadzenButton Text="@(language.Traduction("Eliminar","Delete"))" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-top: 10px" Click="@Delete"></RadzenButton>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <RadzenButton Text="@(language.Traduction("Cancelar","Cancel"))" ButtonStyle="ButtonStyle.Info" Icon="cancel" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
        </div>
    </div>

}
else if (isSuccess)
{
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Success" Size="AlertSize.Medium" Shade="Shade.Light" AllowClose=false>
        @(language.Traduction("El Horario se elimino con éxito", "The User Schedule was successfully deleted!"))
    </RadzenAlert>
    <RadzenButton Text="@(language.Traduction("Volver a la Lista","Return to List"))" ButtonStyle="ButtonStyle.Primary" Icon="check_circle" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}
else if (isError)
{
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Danger" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
        @(language.Traduction("Ocurrió un error al eliminar el registro.", "An error occurred while trying to delete."))
    </RadzenAlert>
    <RadzenButton Text="@(language.Traduction("Aceptar","Accept"))" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 10px" Click="@Cancel"></RadzenButton>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    UserScheduleService userSchedule { get; set; }

    [Inject]
    SpecialtyService specialtyService { get; set; }

    [Inject]
    ScheduleService scheduleService { get; set; }

    [Inject]
    UserService userService { get; set; }

    [Inject]
    LanguageService language { get; set; }

    //Instancias de DTO
    userSearchOutputDTO user = new userSearchOutputDTO();
    SpecialtiesOutputDTO specialties = new SpecialtiesOutputDTO();
    ScheduleSearchOutPutDTO sched = new ScheduleSearchOutPutDTO();


    UserScheduleSearchOutputDTO userSchedulesOu = new UserScheduleSearchOutputDTO();

    Variant variant = Variant.Outlined;

    bool isSuccess = false;
    bool isError = false;

    bool disabled = true;

    protected override async Task OnInitializedAsync()
    {
        var userSchedResult = await userSchedule.GetById(Id);
        userSchedulesOu = userSchedResult.Data;

        var spResult = await specialtyService.GetById(userSchedulesOu.SpecialtieId);
        specialties = spResult.Data;

        var userResult = await userService.GetById(userSchedulesOu.UserId);
        user = userResult.Data;

        var schedResult = await scheduleService.GetById(userSchedulesOu.SchedulesId);
        sched = schedResult.Data;
    }

    private async Task Delete()
    {
        var result = await userSchedule.Delete(Id);

        if (result != null)
            isSuccess = true;
        else
            isError = true;
    }

    private void Cancel()
    {
        navigation.NavigateTo("/userSched");
    }
}
